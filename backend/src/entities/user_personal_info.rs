//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.11

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(
    Clone,
    Debug,
    PartialEq,
    DeriveEntityModel,
    Eq,
    Serialize,
    Deserialize,
    hack4krak_macros :: DeriveUpdatableModel,
    utoipa :: ToSchema,
    Default,
)]
#[sea_orm(table_name = "user_personal_info")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub first_name: String,
    pub birth_year: i32,
    pub location: String,
    pub organization: String,
    pub is_vegetarian: bool,
    pub marketing_consent: bool,
    pub marketing_consent_accepted_at: DateTime,
    pub marketing_consent_updated_at: DateTime,
    pub referral_source: Option<Json>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::users::Entity")]
    Users,
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
