//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.6

pub(crate) use super::sea_orm_active_enums::TeamStatus;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(
    Clone,
    Debug,
    PartialEq,
    DeriveEntityModel,
    Eq,
    Serialize,
    Deserialize,
    hack4krak_macros :: DeriveUpdatableModel,
)]
#[sea_orm(table_name = "teams")]
pub struct Model {
    #[sea_orm(unique)]
    pub name: String,
    pub created_at: DateTime,
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub confirmation_code: Option<Uuid>,
    pub status: TeamStatus,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::flag_capture::Entity")]
    FlagCapture,
    #[sea_orm(has_many = "super::team_invites::Entity")]
    TeamInvites,
    #[sea_orm(has_many = "super::users::Entity")]
    Users,
}

impl Related<super::flag_capture::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::FlagCapture.def()
    }
}

impl Related<super::team_invites::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TeamInvites.def()
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
